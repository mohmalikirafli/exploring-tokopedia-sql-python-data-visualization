# -*- coding: utf-8 -*-
"""Python_Final_Project_DA18_E10

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12jwgHu37mcL9quDXHRSSNLIZKBkYQUJK

## `Pastikan klik 'File > Save a copy in Drive' sebelum memulai pengerjaan`
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.tseries.offsets import BDay

"""#Dataset

Data yang digunakan adalah data yang berasal dari Tokopedia (***bukan data sesungguhnya***). Mengenai penjelasan dataset adalah sebagai berikut:

|variable                       |class     |description |
|:------------------------------|:---------|:-----------|
**order_detail:**
id 			|object| angka unik dari order / id_order
customer_id 		|object|angka unik dari pelanggan
order_date 		|object| tanggal saat dilakukan transaksi
sku_id 			|object| angka unik dari produk (sku adalah stock keeping unit)
price			|int64| harga yang tertera pada tagging harga
qty_ordered 		|int64| jumlah barang yang dibeli oleh pelanggan
before_discount	|float64| nilai harga total dari produk (price * qty_ordered)
discount_amount	|float64| nilai diskon product total
after_discount		|float64| nilai harga total produk ketika sudah dikurangi dengan diskon
is_gross 		|int64| menunjukkan pelanggan belum membayar pesanan
is_valid		|int64| menunjukkan pelanggan sudah melakukan pembayaran
is_net			|int64| menunjukkan transaksi sudah selesai
payment_id 		|int64| angka unik dari metode pembayaran
||
**sku_detail:**
id |object| angka unik dari produk (dapat digunakan untuk key saat join)
sku_name 		|object| nama dari produk
base_price		|float64| harga barang yang tertera pada tagging harga / price
cogs 			|int64| cost of goods sold / total biaya untuk menjual 1 produk
category		|object| kategori produk
||
**customer_detail:**
id 			|object| angka unik dari pelanggan
registered_date	|object| tanggal pelanggan mulai mendaftarkan diri sebagai anggota
||
**payment_detail:**
id			|int64| angka unik dari metode pembayaran
payment_method	|object| metode pembayaran yang digunakan

"""

#Sumber data yang digunakan
path_od = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/order_detail.csv"
path_pd = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/payment_detail.csv"
path_cd = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/customer_detail.csv"
path_sd = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/sku_detail.csv"
df_od = pd.read_csv(path_od)
df_pd = pd.read_csv(path_pd)
df_cd = pd.read_csv(path_cd)
df_sd = pd.read_csv(path_sd)

#Mengampilkan 5 baris pertama
df_od.head()

#Mengampilkan 5 baris pertama
df_pd.head()

#Mengampilkan 5 baris pertama
df_cd.head()

#Mengampilkan 5 baris pertama
df_sd.head()

#Menjalankan SQL di Colab
from sqlite3 import connect
conn = connect(':memory:')
df_od.to_sql('order_detail',conn, index=False, if_exists='replace')
df_pd.to_sql('payment_detail', conn, index=False, if_exists='replace')
df_sd.to_sql('sku_detail', conn, index=False, if_exists='replace')
df_cd.to_sql('customer_detail', conn, index=False, if_exists='replace')

#Query SQL untuk menggabungkan data
df = pd.read_sql("""
SELECT
    order_detail.*,
    payment_detail.payment_method,
    sku_detail.sku_name,
    sku_detail.base_price,
    sku_detail.cogs,
    sku_detail.category,
    customer_detail.registered_date
FROM order_detail
LEFT JOIN payment_detail
    on payment_detail.id = order_detail.payment_id
LEFT JOIN sku_detail
    on sku_detail.id = order_detail.sku_id
LEFT JOIN customer_detail
    on customer_detail.id = order_detail.customer_id
""", conn)

#Mengampilkan 5 baris pertama
df.head()

#Menampikan tipe data tiap kolom
df.dtypes

#Mengubah tipe data agar mudah dilakukan pengolahan data
df = df.astype({"before_discount":'int',
                "discount_amount":'int',
                "after_discount":'int',
                "base_price":'int'})
df.dtypes

#Mengubah tipe kolom Date menjadi Datetime
df['order_date']= pd.to_datetime(df['order_date'])
df['registered_date']= pd.to_datetime(df['registered_date'])
df.dtypes

"""## `No 1`
**Dear Data Analyst**,
<br></br>
Akhir tahun ini, perusahaan akan memberikan hadiah bagi pelanggan yang memenangkan kompetisi **Festival Akhir Tahun**. Tim Marketing membutuhkan bantuan untuk menentukan perkiraan hadiah yang akan diberikan pada pemenang kompetisi nantinya. Hadiah tersebut akan diambil dari **TOP 5 Produk** dari Kategori **Mobiles & Tablets** selama tahun 2022, dengan jumlah kuantitas penjualan (valid = 1) paling tinggi.

Mohon bantuan, untuk mengirimkan data tersebut sebelum akhir bulan ini ke Tim Marketing. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Marketing**

<details><summary>Klik di sini untuk tips</summary>


```python
1. Memfilter data dengan valid = 1
2. Memfilter data dengan Category = Mobiles & Tablets
3. Memfilter data pada transaksi selama 2022
4. Gunakan groupby berdasarkan sku_name
5. Gunakan sort_values untuk mengurutkan data
6. Gunakan head untuk menampilkan top 5 produk


```



</details>

## `Jawaban No 1`
"""

prizedata = pd.DataFrame(
    df[(df['is_valid']==1) &
       (df['category']=='Mobiles & Tablets') &
       ((df['order_date']>='2022-01-01') & (df['order_date']<='2022-12-31'))]
    .groupby(['sku_name'])['qty_ordered'].sum()
    .sort_values(ascending=False)
    .head(5)
    .reset_index(name='qty_total_2022')
)
# show the final output
prizedata

# sort the data to make the diagram
prizedata.sort_values(
    by=['qty_total_2022'],
    ascending=False,
    inplace=True
)

# how to make the chart
prizedata.plot(
    x='sku_name',
    y=['qty_total_2022'],
    kind='bar',
    grid = True,
    xlabel = 'Products',
    ylabel = '2022_Quantity',
    figsize=(13,5),
    rot = 0,
    title = 'Top 5 Products',
    table = False,
    secondary_y = False
  )

"""**INSIGHT No. 1**

Berdasarkan data yang dihasilkan, TOP 5 Produk dari kategori Mobiles & Gadgets dengan kuantitas penjualan terbanyak selama 2022 ialah IDROID_BALRX7-Gold dengan 1000 unit terjual dan diikuti IDROID_BALRX7-Jet black	dengan 31 unit terjual,  Infinix Hot 4-Gold dengan 15 unit terjual, samsung_Grand Prime Plus-Black dengan 11 unit terjual, dan 	infinix_Zero 4-Grey.

Dikarenakan IDROID_BALRX7-Gold memiliki jumlah unit terjual yang secara signifikan jauh lebih banyak dibanding 4 produk berikutnya, maka dapat disimpulkan bahwa produk IDROID_BALRX7-Gold dapat dijadikan hadiah untuk pemenang kompetisi Festival Akhir Tahun.

## `No 2`
**Dear Data Analyst**,
<br></br>
Menindaklanjuti meeting gabungan Tim Werehouse dan Tim Marketing, kami menemukan bahwa ketersediaan stock produk dengan Kategori Others pada akhir 2022 kemarin masih banyak.
1. Kami mohon bantuan untuk melakukan pengecekan data penjualan kategori tersebut dengan tahun 2021 secara kuantitas penjualan. Dugaan sementara kami, telah terjadi penurunan kuantitas penjualan pada 2022 dibandingkan 2021. (Mohon juga menampilkan data ke-15 kategori)
<br></br>
2. Apabila memang terjadi penurunan kuantitas penjualan pada kategori Others, kami mohon bantuan untuk menyediakan data TOP 20 nama produk yang mengalami penurunan paling tinggi pada 2022 jika dibanding dengan 2021. Hal ini kami gunakan sebagai bahan diskusi pada meeting selanjutnya.  

Mohon bantuan untuk mengirimkan data tersebut paling lambat 4 hari dari hari ini. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Werehouse**

<details><summary>Klik di sini untuk tips</summary>


```python
1. Memfilter data dengan valid = 1
2. Memfilter data pada transaksi selama 2021
3. Memfilter data pada transaksi selama 2022
4. Gunakan groupby berdasarkan sku_name masing-masing tahun
5. Menggabungkan kedua data dengan merge
6. Lakukan pengurangan kolom qty 2022 dengan qty 2021


```



</details>

## `Jawaban No 2.1`
"""

# to filter data by is_valid = 1 and show only those data in 2021 & 2022
data_2022 = df[(df['is_valid']==1) & (df['order_date'].dt.year==2022)]
data_2021 = df[(df['is_valid']==1) & (df['order_date'].dt.year==2021)]

# group the data by category and order the data by sum of qty_ordered
data_2022_gb = data_2022.groupby(['category'])['qty_ordered'].sum()
data_2021_gb = data_2021.groupby(['category'])['qty_ordered'].sum()

# data 2021 to 2022 v.2
data2_merge = pd.merge(data_2022_gb, data_2021_gb, how='outer', on='category', suffixes=('_2022','_2021'))
data2_merge.sort_values(by=['category'],ascending=True)

# sales progress from 2021 to 2022
data2_merge['sales_progress'] = data2_merge['qty_ordered_2022'] - data2_merge['qty_ordered_2021']

# sales progress status 2021 to 2022
def sales_status(status):
  if status > 0:
    return "Increased"
  elif status < 0:
    return "Decreased"
  else:
    return "Stagnant"

# applying sales progress status
data2_merge['status'] = data2_merge['sales_progress'].apply(sales_status)

# sort the 15 categories by its sales progress from smallest to largest
data2_sort = data2_merge.sort_values(by=['sales_progress'],ascending=True)

# show the data
data2_sort

# how to make the chart to make a better insight
plt.figure(figsize=(17,5))
plt.barh(data2_sort.index, data2_sort['sales_progress'], color='skyblue')
plt.xlabel('Sales Progress')
plt.ylabel('Category')
plt.title('2021 to 2022 Sales Progress')
plt.gca().invert_yaxis()
plt.show

"""**INSIGHT No. 2.1**

Dari data yang dihasilkan, dapat disimpulkan bahwa penjualan produk kategori Others mengalami penurunan pada tahun 2022 dibanding tahun 2021. Kategori lainnya yang mengalami penurunan pada periode yang sama ialah Soghaat, Mens Fashion, dan Beauty & Grooming.

11 kategori lainnya pada periode yang sama yang mengalami kenaikan penjualan ialah Books, Appliances, Health & Sports, Computing, School & Education, Home & Living, Kids & Baby, Entertainment, Superstore, Women Fashion, serta Mobiles & Gaming.

## `Jawaban No 2.2`
"""

# to filter data by Others category from is_valid = 1 data in 2021 & 2022
others_2021 = data_2021[data_2021['category']=='Others']
others_2022 = data_2022[data_2022['category']=='Others']

# group the data by sku_name and order the data by sum of qty_ordered
others_2021_gb = others_2021.groupby(['sku_name'])['qty_ordered'].sum()
others_2022_gb = others_2022.groupby(['sku_name'])['qty_ordered'].sum()

# data quantity kategori Others 2021 to 2022 v.2
others2_merge = pd.merge(others_2021_gb, others_2022_gb, how='outer', on='sku_name', suffixes=('_2021','_2022'))
others2_merge.fillna(0, inplace=True)

# Others category sales progress 2021 to 2022
others2_merge['sales_progress']=others2_merge['qty_ordered_2022']-others2_merge['qty_ordered_2021']

# sales progress status 2021 to 2022
def sales_status(status):
  if status > 0:
    return "Increased"
  elif status < 0:
    return "Decreased"
  else:
    return "Stagnant"

# applying sales progress status
others2_merge['status'] = others2_merge['sales_progress'].apply(sales_status)

# sort the 20 products by its sales progress from smallest to largest
others2_sort = others2_merge.sort_values(by='sales_progress',ascending=True).head(20)

# show the data
others2_sort

# data summary for insight
worst20_status_count = others2_sort['qty_ordered_2022'].value_counts()

# show the summary
worst20_status_count

"""**INSIGHT 2.2**

Dari data yang dihasilkan dapat ketahui terdapat 20 produk dari kategori Others dengan progress penjualan 2021 ke 2022 paling kecil. Dari data tersebut, RB_Dettol Germ Busting Kit-bf menjadi produk dengan penurunan terendah yaitu -155. Dan jika diperhatikan lebih lanjut, tidak terdapat penjualan sama sekali pada 15 dari 20 produk tersebut di tahun 2022.

## `No 3`
**Dear Data Analyst**,
<br></br>
Terkait ulang tahun perusahaan pada 2 bulan mendatang, Tim Digital Marketing akan memberikan informasi promo bagi pelanggan pada akhir bulan ini. Kriteria pelanggan yang akan kami butuhkan adalah mereka yang sudah melakukan check-out namun belum melakukan pembayaran (is_gross = 1) selama tahun 2022. Data yang kami butuhkan adalah ID Customer dan Registered Date.

Mohon bantuan, untuk mengirimkan data tersebut sebelum akhir bulan ini ke Tim Digital Marketing. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Digital Marketing**

<details><summary>Klik di sini untuk tips</summary>


```python
1. Memfilter data dengan gross = 1
2. Memfilter data dengan valid = 0
3. Memfilter data dengan net = 0
4. Memfilter data pada transaksi selama 2022


```



</details>

## `Jawaban No 3`
"""

data_promo = df[
    (df['is_gross']==1) & # to include the is_gross data into the filter
    (df['is_valid']==0) & # to exclude the is_valid data out of the filter
    (df['is_net']==0) & # to exclude the is_valid data out of the filter
    ((df['order_date']>='2022-01-01') & (df['order_date']<='2022-12-31')) # to show only the data in 2022
]

cust_promo_data = data_promo[['customer_id','registered_date']].drop_duplicates() # to clean the data from duplicates

# show the result
cust_promo_data

# run this code to download the file
from google.colab import files
cust_promo_data.to_csv('promo_target_cust.csv', encoding = 'utf-8-sig',index=False)
files.download('promo_target_cust.csv')

"""**INSIGHT No. 3**

Dari data yang dihasilkan, dapat disimpulkan bahwa terdapat 820 pelanggan yang dapat diberikan informasi promo oleh Tim Digital Marketing.

## `No 4`
**Dear Data Analyst**,
<br></br>
Pada bulan October hingga Desember 2022, kami melakukan campaign setiap hari Sabtu dan Minggu. Kami hendak menilai, apakah campaign tersebut cukup berdampak pada kenaikan penjualan (before_discount). Mohon bantuan untuk menampilkan data:
1. Rata-rata harian penjualan weekends (Sabtu dan Minggu) vs rata-rata harian penjualan weekdays (Senin-Jumat) per bulan tersebut. Apakah ada peningkatan penjualan pada masing-masing bulan tersebut.
2. Rata-rata harian penjualan weekends (Sabtu dan Minggu) vs rata-rata harian penjualan weekdays (Senin-Jumat) keseluruhan 3 bulan tersebut.

Mohon bantuan untuk mengirimkan data tersebut paling lambat minggu depan. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Campaign**

<details><summary>Klik di sini untuk tips</summary>


```python
1. Buatlah kolom baru untuk day, month, dan month number
2. Memfilter data dengan valid = 1
3. Memfilter data dengan day termasuk 'Saturday', 'Sunday' dengan menggunakan fungsi isin dan simpan dalam variable 'weekends'
4. Memfilter data dengan day termasuk 'Monday','Tuesday','Wednesday','Thusday','Friday' dengan menggunakan fungsi isin dan simpan dengan variabel 'weekday'
5. Memfilter data pada transaksi selama 2022 bulan Oktober sampai dengan Desember
6. Gunakan groupby berdasarkan pada masing-masing variabel
7. Menggabungkan kedua data dengan merge
8. Tampilkan pada grafik batang untuk melihat perbedaananya


```



</details>

## `Jawaban No 4.1`
"""

# how to make additional columns for day, month, and month_num
df['day']=df['order_date'].dt.day_name()
df['month']=df['order_date'].dt.month_name()
df['month_num']=df['order_date'].dt.month

# weekend daily sales data per month in Q42022
weekend_daily = pd.DataFrame(df[(df['is_valid']==1) & # filter the data by is_valid = 1
                               (df['day'].isin(['Saturday','Sunday'])) & # filter the day data to only in Saturday & Sunday
                               (df['order_date']>='2022-10-01') & (df['order_date']<='2022-12-31')] # to show only Q4 2022 data
                            .groupby(by=['month_num','month','order_date','day'])['before_discount'].sum() # group the data then order the data by the sum of before_discount
                            .round() # round the numerical data
                            .sort_values(ascending=False) # order the data from the largest to the smallest
                            .reset_index(name='weekend_daily_sum') # rename the column to weekend_avg
                            )
# show the data
weekend_daily

# weekend sales avg per month
avg_weekend_sales = weekend_daily.groupby(by=['month_num','month',])['weekend_daily_sum'].mean().round().sort_values(ascending=True).reset_index(name='weekend_avg')

# show the data
avg_weekend_sales

# weekdays daily sales data per month in Q42022
weekdays_daily = pd.DataFrame(df[(df['is_valid']==1) & # filter the data by is_valid = 1
                               (df['day'].isin(['Monday','Tuesday','Wednesday','Thursday','Friday'])) & # filter the day data to only in MOnday, Tuesday, Wednesday, Thursday, & Friday
                               (df['order_date']>='2022-10-01') & (df['order_date']<='2022-12-31')] # to show only Q4 2022 data
                            .groupby(by=['month_num','month','order_date','day'])['before_discount'].sum() # group the data then  order the data by the sum of before_discount
                            .round() # round the numerical data
                            .sort_values(ascending=False) # order the data from the largest to the smallest
                            .reset_index(name='weekdays_daily_sum') # rename the column to weekend_avg
                            )
# show the data
weekdays_daily

# weekdays sales avg per month
avg_weekdays_sales = weekdays_daily.groupby(by=['month_num','month',])['weekdays_daily_sum'].mean().round().sort_values(ascending=True).reset_index(name='weekdays_avg')

# show the data
avg_weekdays_sales

# to show the merge of weekend vs weekdays per month Q4 2022 data
per_month_avg = avg_weekend_sales.merge(avg_weekdays_sales, left_on='month', right_on='month')
per_month_avg.sort_values(by='month_num_x', ascending=True, inplace=True)

#final output
per_month_avg = per_month_avg[['month', 'weekend_avg', 'weekdays_avg']]
per_month_avg_progress = per_month_avg

#progress sum
per_month_avg_progress['progress_avg'] = per_month_avg_progress['weekend_avg'] - per_month_avg_progress['weekdays_avg']
per_month_avg_progress['progress_avg_%'] = round(per_month_avg_progress['progress_avg']/per_month_avg_progress['weekend_avg']*100)

# show the final output
per_month_avg_progress

# how to make the chart to show better insight
per_month_avg_progress.plot(
    x='month',
    y=['weekdays_avg','weekend_avg'],
    kind='bar',
    grid = True,
    xlabel = 'Month',
    ylabel = 'Progress/Month',
    figsize=(11,5),
    rot = 0,
    title = 'Q42022 Monthly Sales Avg',
    table = False,
    secondary_y = False
  )

"""**INSIGHT No. 4.1**

Dari data yang dihasilkan, dapat diketahui bahwa pada masing-masing bulan di Q4 2022 terdapat penurunan rata-rata penjualan harian (*before_discount*).

Namun bila diperhatikan lebih lanjut, penurunan tersebut paling tinggi terjadi di bulan Desember 2022 yaitu sebesar 4.436.536,0 atau 108% pada Desember. Penurunan tersebut jauh lebih tinggi dibanding 2 bulan sebelumnya pada kuartal yang sama. Dengan demikian, campaign yang dilakukan setiap hari Sabtu dan Minggu di bulan Desember 2022 tidak memberikan dampak pada peningkatan penjualan (*before-discount*) rata-rata di *weekends* bulan Desember 2022.

Penurunan pada paling rendah terjadi di bulan November 2022 yaitu sebesar 430.621,0 atau 7%. Penurunan tersebut jauh lebih rendah dibanding 2 bulan lainnya kuartal yang sama. Walau jauh lebih rendah, dikarenakan tetap penurunan, maka campaign yang dilakukan setiap hari Sabtu dan Minggu di bulan November 2022 tidak memberikan dampak pada peningkatan penjualan (*before-discount*) rata-rata di *weekends* bulan November 2022.

## `Jawaban No 4.2`
"""

# final output
Q42022_avg =  {'Period':'Q4_2022',
               'Weekend_Avg': round(weekend_daily['weekend_daily_sum'].mean(),1),
               'Weekdays_Avg': round(weekdays_daily['weekdays_daily_sum'].mean(),1),
               'Progress_Avg': round(weekend_daily['weekend_daily_sum'].mean() - weekdays_daily['weekdays_daily_sum'].mean(),1),
               'Progress_Avg_%': round(((weekend_daily['weekend_daily_sum'].mean() - weekdays_daily['weekdays_daily_sum'].mean())/weekend_daily['weekend_daily_sum'].mean())*100,1)
               }

# show the output
pd.DataFrame(data=Q42022_avg, index=[0])

"""**INSIGHT No. 4.2**

Dari data yang dihasilkan, dapat diketahui bahwa terdapat penurunan rata-rata penjualan (*before_discount*) harian pada keseluruhan weekend Q4 2022 dibanding keseluruhan weekdays Q4 2022 yaitu sebesar 2.250.949,3 atau 42.7%. Dengan demikian, dapat disimpulkan bahwa campaign yang dilakukan setiap hari Sabtu dan Minggu di Q4 2022 tidak memberikan dampak pada kenaikan rata-rata penjualan (*before_discount*) di keseluruhan *weekends* Q4 2022.
"""